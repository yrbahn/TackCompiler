I create a parser program for tack program using Happy and Alex for Haskell

-- files
README -- this file
tacklexer.x -- an input of Alex, lexer generator tool
tackparser.y -- an input of Happy, parser generator tool(LR(1))
token.hs -- token 
scrpos.hs -- position info for token
ast.hs         -- AST
prettyprint.hs -- library for pretty print
SymbolTable.hs -- symbol table
SymbolType.hs  -- definition of type for symbol
GetTackType.hs -- get a tack type from expression
PrintSymbolTable.hs -- the display of symbol table
SemanticAnalyzer.hs -- Semantic Analyzer
tackpprinter   --- parser for tack language  ( generated by 'make' )
semanticAnalyzer  -- semantic analysis  program 
printSymbolTable -- program for printing symbol table
result        --  output directory

-- how to make and run
'make'  for compiling and linking
'make symbol' generate symbol table for all test files
'make sym_diff' comparing my result with syms files in test directory
'make type' type checking(semantic analysis)

First, make 
make symbol
make sym_diff -- you can check that my symbol table tree is correct.
make type

